# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tracardi_pro_services_pb2 as tracardi__pro__services__pb2


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_available_hosts = channel.unary_unary(
                '/tracardi_pro.Service/get_available_hosts',
                request_serializer=tracardi__pro__services__pb2.EmptyParams.SerializeToString,
                response_deserializer=tracardi__pro__services__pb2.Hosts.FromString,
                )
        self.get_available_services = channel.unary_unary(
                '/tracardi_pro.Service/get_available_services',
                request_serializer=tracardi__pro__services__pb2.EmptyParams.SerializeToString,
                response_deserializer=tracardi__pro__services__pb2.Services.FromString,
                )
        self.sign_up = channel.unary_unary(
                '/tracardi_pro.Service/sign_up',
                request_serializer=tracardi__pro__services__pb2.Credentials.SerializeToString,
                response_deserializer=tracardi__pro__services__pb2.Hosts.FromString,
                )
        self.authorize = channel.unary_unary(
                '/tracardi_pro.Service/authorize',
                request_serializer=tracardi__pro__services__pb2.Credentials.SerializeToString,
                response_deserializer=tracardi__pro__services__pb2.Token.FromString,
                )


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_available_hosts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_available_services(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sign_up(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def authorize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_available_hosts': grpc.unary_unary_rpc_method_handler(
                    servicer.get_available_hosts,
                    request_deserializer=tracardi__pro__services__pb2.EmptyParams.FromString,
                    response_serializer=tracardi__pro__services__pb2.Hosts.SerializeToString,
            ),
            'get_available_services': grpc.unary_unary_rpc_method_handler(
                    servicer.get_available_services,
                    request_deserializer=tracardi__pro__services__pb2.EmptyParams.FromString,
                    response_serializer=tracardi__pro__services__pb2.Services.SerializeToString,
            ),
            'sign_up': grpc.unary_unary_rpc_method_handler(
                    servicer.sign_up,
                    request_deserializer=tracardi__pro__services__pb2.Credentials.FromString,
                    response_serializer=tracardi__pro__services__pb2.Hosts.SerializeToString,
            ),
            'authorize': grpc.unary_unary_rpc_method_handler(
                    servicer.authorize,
                    request_deserializer=tracardi__pro__services__pb2.Credentials.FromString,
                    response_serializer=tracardi__pro__services__pb2.Token.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tracardi_pro.Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_available_hosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracardi_pro.Service/get_available_hosts',
            tracardi__pro__services__pb2.EmptyParams.SerializeToString,
            tracardi__pro__services__pb2.Hosts.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_available_services(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracardi_pro.Service/get_available_services',
            tracardi__pro__services__pb2.EmptyParams.SerializeToString,
            tracardi__pro__services__pb2.Services.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sign_up(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracardi_pro.Service/sign_up',
            tracardi__pro__services__pb2.Credentials.SerializeToString,
            tracardi__pro__services__pb2.Hosts.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def authorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracardi_pro.Service/authorize',
            tracardi__pro__services__pb2.Credentials.SerializeToString,
            tracardi__pro__services__pb2.Token.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
